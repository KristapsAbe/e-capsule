{"ast":null,"code":"export const validateProfileForm=formData=>{const errors={};const safeTrim=value=>{if(value===null||value===undefined)return'';return String(value).trim();};const firstName=safeTrim(formData.firstName);if(!firstName){errors.firstName='First name is required';}else if(firstName.length<2){errors.firstName='First name must be at least 2 characters';}else if(firstName.length>50){errors.firstName='First name must not exceed 50 characters';}const lastName=safeTrim(formData.lastName);if(!lastName){errors.lastName='Last name is required';}else if(lastName.length<2){errors.lastName='Last name must be at least 2 characters';}else if(lastName.length>50){errors.lastName='Last name must not exceed 50 characters';}const email=safeTrim(formData.email);if(!email){errors.email='Email is required';}else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)){errors.email='Invalid email address';}const bio=safeTrim(formData.bio);if(bio&&bio.length>500){errors.bio='Bio must not exceed 500 characters';}const newPassword=safeTrim(formData.newPassword);const confirmNewPassword=safeTrim(formData.confirmNewPassword);if(newPassword){if(newPassword.length<8){errors.newPassword='Password must be at least 8 characters';}else if(!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(newPassword)){errors.newPassword='Password must contain at least one uppercase letter, one lowercase letter, and one number';}if(newPassword!==confirmNewPassword){errors.confirmNewPassword='Passwords do not match';}}else if(confirmNewPassword){errors.newPassword='Please enter a new password';}if(formData.image&&formData.image.size>2*1024*1024){// 2MB\nerrors.image='Image size must not exceed 2MB';}return errors;};","map":{"version":3,"names":["validateProfileForm","formData","errors","safeTrim","value","undefined","String","trim","firstName","length","lastName","email","test","bio","newPassword","confirmNewPassword","image","size"],"sources":["/Users/kristaps/Desktop/kvalifikacija/react/src/components/validations/ProfileValidations.js"],"sourcesContent":["export const validateProfileForm = (formData) => {\n  const errors = {};\n  \n  const safeTrim = (value) => {\n    if (value === null || value === undefined) return '';\n    return String(value).trim();\n  };\n\n  const firstName = safeTrim(formData.firstName);\n  if (!firstName) {\n    errors.firstName = 'First name is required';\n  } else if (firstName.length < 2) {\n    errors.firstName = 'First name must be at least 2 characters';\n  } else if (firstName.length > 50) {\n    errors.firstName = 'First name must not exceed 50 characters';\n  }\n\n  const lastName = safeTrim(formData.lastName);\n  if (!lastName) {\n    errors.lastName = 'Last name is required';\n  } else if (lastName.length < 2) {\n    errors.lastName = 'Last name must be at least 2 characters';\n  } else if (lastName.length > 50) {\n    errors.lastName = 'Last name must not exceed 50 characters';\n  }\n\n  const email = safeTrim(formData.email);\n  if (!email) {\n    errors.email = 'Email is required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  const bio = safeTrim(formData.bio);\n  if (bio && bio.length > 500) {\n    errors.bio = 'Bio must not exceed 500 characters';\n  }\n\n  const newPassword = safeTrim(formData.newPassword);\n  const confirmNewPassword = safeTrim(formData.confirmNewPassword);\n\n  if (newPassword) {\n    if (newPassword.length < 8) {\n      errors.newPassword = 'Password must be at least 8 characters';\n    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(newPassword)) {\n      errors.newPassword = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n    }\n\n    if (newPassword !== confirmNewPassword) {\n      errors.confirmNewPassword = 'Passwords do not match';\n    }\n  } else if (confirmNewPassword) {\n    errors.newPassword = 'Please enter a new password';\n  }\n\n  if (formData.image && formData.image.size > 2 * 1024 * 1024) { // 2MB\n    errors.image = 'Image size must not exceed 2MB';\n  }\n\n  return errors;\n};"],"mappings":"AAAA,MAAO,MAAM,CAAAA,mBAAmB,CAAIC,QAAQ,EAAK,CAC/C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAAC,CAEjB,KAAM,CAAAC,QAAQ,CAAIC,KAAK,EAAK,CAC1B,GAAIA,KAAK,GAAK,IAAI,EAAIA,KAAK,GAAKC,SAAS,CAAE,MAAO,EAAE,CACpD,MAAO,CAAAC,MAAM,CAACF,KAAK,CAAC,CAACG,IAAI,CAAC,CAAC,CAC7B,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGL,QAAQ,CAACF,QAAQ,CAACO,SAAS,CAAC,CAC9C,GAAI,CAACA,SAAS,CAAE,CACdN,MAAM,CAACM,SAAS,CAAG,wBAAwB,CAC7C,CAAC,IAAM,IAAIA,SAAS,CAACC,MAAM,CAAG,CAAC,CAAE,CAC/BP,MAAM,CAACM,SAAS,CAAG,0CAA0C,CAC/D,CAAC,IAAM,IAAIA,SAAS,CAACC,MAAM,CAAG,EAAE,CAAE,CAChCP,MAAM,CAACM,SAAS,CAAG,0CAA0C,CAC/D,CAEA,KAAM,CAAAE,QAAQ,CAAGP,QAAQ,CAACF,QAAQ,CAACS,QAAQ,CAAC,CAC5C,GAAI,CAACA,QAAQ,CAAE,CACbR,MAAM,CAACQ,QAAQ,CAAG,uBAAuB,CAC3C,CAAC,IAAM,IAAIA,QAAQ,CAACD,MAAM,CAAG,CAAC,CAAE,CAC9BP,MAAM,CAACQ,QAAQ,CAAG,yCAAyC,CAC7D,CAAC,IAAM,IAAIA,QAAQ,CAACD,MAAM,CAAG,EAAE,CAAE,CAC/BP,MAAM,CAACQ,QAAQ,CAAG,yCAAyC,CAC7D,CAEA,KAAM,CAAAC,KAAK,CAAGR,QAAQ,CAACF,QAAQ,CAACU,KAAK,CAAC,CACtC,GAAI,CAACA,KAAK,CAAE,CACVT,MAAM,CAACS,KAAK,CAAG,mBAAmB,CACpC,CAAC,IAAM,IAAI,CAAC,0CAA0C,CAACC,IAAI,CAACD,KAAK,CAAC,CAAE,CAClET,MAAM,CAACS,KAAK,CAAG,uBAAuB,CACxC,CAEA,KAAM,CAAAE,GAAG,CAAGV,QAAQ,CAACF,QAAQ,CAACY,GAAG,CAAC,CAClC,GAAIA,GAAG,EAAIA,GAAG,CAACJ,MAAM,CAAG,GAAG,CAAE,CAC3BP,MAAM,CAACW,GAAG,CAAG,oCAAoC,CACnD,CAEA,KAAM,CAAAC,WAAW,CAAGX,QAAQ,CAACF,QAAQ,CAACa,WAAW,CAAC,CAClD,KAAM,CAAAC,kBAAkB,CAAGZ,QAAQ,CAACF,QAAQ,CAACc,kBAAkB,CAAC,CAEhE,GAAID,WAAW,CAAE,CACf,GAAIA,WAAW,CAACL,MAAM,CAAG,CAAC,CAAE,CAC1BP,MAAM,CAACY,WAAW,CAAG,wCAAwC,CAC/D,CAAC,IAAM,IAAI,CAAC,gCAAgC,CAACF,IAAI,CAACE,WAAW,CAAC,CAAE,CAC9DZ,MAAM,CAACY,WAAW,CAAG,2FAA2F,CAClH,CAEA,GAAIA,WAAW,GAAKC,kBAAkB,CAAE,CACtCb,MAAM,CAACa,kBAAkB,CAAG,wBAAwB,CACtD,CACF,CAAC,IAAM,IAAIA,kBAAkB,CAAE,CAC7Bb,MAAM,CAACY,WAAW,CAAG,6BAA6B,CACpD,CAEA,GAAIb,QAAQ,CAACe,KAAK,EAAIf,QAAQ,CAACe,KAAK,CAACC,IAAI,CAAG,CAAC,CAAG,IAAI,CAAG,IAAI,CAAE,CAAE;AAC7Df,MAAM,CAACc,KAAK,CAAG,gCAAgC,CACjD,CAEA,MAAO,CAAAd,MAAM,CACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}